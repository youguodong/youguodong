<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[装饰器模式]]></title>
    <url>%2F2018%2F12%2F28%2F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[使用者无权访问目标对象，中间加代理，通过代理做授权和控制 相关代码实现1234567891011121314151617181920212223class ReadImg &#123; constructor(fileName) &#123; this.fileName = fileName this.loadFromDisk() &#125; display() &#123; console.log('display...' + this.fileName) &#125; loadFromDisk() &#123; console.log('loading...' + this.fileName) &#125;&#125;class ProxyImg &#123; constructor(fileName) &#123; this.realImg = new ReadImg(fileName) &#125; display() &#123; this.realImg.display() &#125;&#125;let proxyImg = new ProxyImg('1.png')proxyImg.display() 使用场景场景1 网页事件代理 12345678910111213141516171819&lt;body&gt; &lt;div id="div1"&gt; &lt;a href="#"&gt;a1&lt;/a&gt; &lt;a href="#"&gt;a2&lt;/a&gt; &lt;a href="#"&gt;a3&lt;/a&gt; &lt;a href="#"&gt;a4&lt;/a&gt; &lt;a href="#"&gt;a5&lt;/a&gt; &lt;a href="#"&gt;a6&lt;/a&gt; &lt;/div&gt; &lt;script src="https://cdn.bootcss.com/jquery/3.3.0/jquery.js"&gt; let div1 = document.getElementById('div1') div1.addEventListener('click',function (e) &#123; let target = e.target if (target.nodeName === 'A')&#123; alert(target.innerHTML) &#125; &#125;) &lt;/script&gt;&lt;/body&gt; 场景2 jQuery $.proxy 123456789101112131415161718&lt;body&gt; &lt;div id="div1"&gt; &lt;a href="#"&gt;a1&lt;/a&gt; &lt;a href="#"&gt;a2&lt;/a&gt; &lt;a href="#"&gt;a3&lt;/a&gt; &lt;a href="#"&gt;a4&lt;/a&gt; &lt;a href="#"&gt;a5&lt;/a&gt; &lt;a href="#"&gt;a6&lt;/a&gt; &lt;/div&gt; &lt;script src="https://cdn.bootcss.com/jquery/3.3.0/jquery.js"&gt; $('#div1').click(function () &#123; let _this = this setTimeout(function () &#123; $(_this).css('background-color', 'yellow') &#125;,1000) &#125;) &lt;/script&gt;&lt;/body&gt; 12345678910111213141516171819&lt;body&gt; &lt;div id="div1"&gt; &lt;a href="#"&gt;a1&lt;/a&gt; &lt;a href="#"&gt;a2&lt;/a&gt; &lt;a href="#"&gt;a3&lt;/a&gt; &lt;a href="#"&gt;a4&lt;/a&gt; &lt;a href="#"&gt;a5&lt;/a&gt; &lt;a href="#"&gt;a6&lt;/a&gt; &lt;/div&gt; &lt;script src="https://cdn.bootcss.com/jquery/3.3.0/jquery.js"&gt; $('#div1').click(function () &#123; let fn = function () &#123; $(this).css('background-color', 'yellow') &#125; fn = $.proxy(fn, this) setTimeout(fn,1000) &#125;) &lt;/script&gt;&lt;/body&gt; 场景3 明星与经纪人 1234567891011121314151617181920212223242526272829303132333435// 明星let star = &#123; name: '张xx', age: 25, phone: 'star: 1390000011111'&#125;//经纪人let agent = new Proxy(star,&#123; get: function (target, key) &#123; if (key === 'phone')&#123; return 'agent: 16899997777' &#125; if (key === 'price') &#123; return 120000 &#125; return target[key] &#125;, set: function (target, key, val) &#123; if (key === 'customPrice')&#123; if (val &lt; 100000)&#123; throw new Error('价格太低') &#125;else &#123; target[key] = value return true &#125; &#125; &#125;&#125;)console.log(agent.name)console.log(agent.age)console.log(agent.phone)console.log(agent.price)agent.customPrice = 90000]]></content>
      <categories>
        <category>js中的设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建Next主题使用小结]]></title>
    <url>%2F2018%2F12%2F28%2FHexoNext%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[自己在使用hexo搭建博客的时候碰到了不少坑，下面来做一些总结吧! 注: 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 1. 启动及部署指令本地查看效果12hexo generatehexo server 部署到服务器123hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo generatehexo server 2. next主题配置博客主题样式主题配置文件修改 scheme: Pisces 设置语言站点配置文件修改 language: zh-Hans 设置菜单栏主题配置文件修改 1234567menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archivemenu_icons: enable: true 设置菜单栏总是靠左显示主题配置文件修改 123sidebar: position: left display: always 设置头像主题配置文件修改 1avatar: http://example.com/avatar.png 设置作者昵称站点配置文件修改 author: xxx 设置首页只显示预览(卡片效果)主题配置文件修改 123auto_excerpt: enable: true length: 150 添加站点搜索功能第一步 站点根目录安装 hexo-generator-searchdb 1npm install hexo-generator-searchdb --save 第二步 站点配置文件 添加search字段具体如下 12345search: path: search.xml field: post format: html limit: 10000 第三步 主题配置文件 修改 12local_search: enable: true 添加标签页面第一步 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags 12$ cd your-hexo-site$ hexo new page tags 第二步 .md的页面内容设置如下 123title: js设计模式date: 2014-12-22 12:39:04type: &quot;tags&quot;(必填) 第三步 修改菜单 在菜单中添加链接，编辑主题配置文件， 添加 tags 到 menu 中，如下: 1234menu: home: / archives: /archives tags: /tags (必填) 添加分类页面第一步 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories 12cd your-hexo-sitehexo new page categories 第二步 编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下： 1234title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot; (必填)--- 第三步 在菜单中添加链接。编辑主题配置文件,添加 categories 到 menu 中，如下: 1234menu: home: / archives: /archives categories: /categories (必填)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[装饰器模式]]></title>
    <url>%2F2018%2F12%2F28%2F%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[为对象添加新功能，不改变原有的结构和功能 相关代码实现1234567891011121314151617181920212223class Circle &#123; draw() &#123; console.log('画一个圆') &#125;&#125;class Decorator &#123; constructor(circle)&#123; this.circle = circle &#125; draw() &#123; this.circle.draw() this.setRedBorder(circle) &#125; setRedBorder(cicle)&#123; console.log('设置红色边框') &#125;&#125;let circle = new Circle()circle.draw()let decorator = new Decorator(circle)decorator.draw() 使用场景(es7装饰器)core-decorators第三库的使用 环境配置 1234567 npm install @babel/plugin-proposal-decorators --save-dev.babelrc相关配置 &#123; &quot;presets&quot;: [&quot;@babel/preset-env&quot;], &quot;plugins&quot;: [[&quot;@babel/plugin-proposal-decorators&quot;,&#123;&quot;legacy&quot;:true&#125;]] &#125; 场景1 123456789@testDecclass Demo &#123;&#125;function testDec (target) &#123; target.desc = true&#125;alert(Demo.desc) 场景2 1234567891011121314151617181920function mixin (...list) &#123; return function (target) &#123; Object.assign(target.prototype,...list) &#125;&#125;const Foo = &#123; foo()&#123; alert('foo') &#125;&#125;@mixin(Foo)class MyClass &#123;&#125;let tem = new MyClass()tem.foo() 场景3 123456789101112131415161718192021function readOnly (target,name,descriptor) &#123; descriptor.writable = false console.log(descriptor) return descriptor&#125;class Person &#123; constructor() &#123; this.first = 'A' this.last = 'B' &#125; @readOnly name() &#123; return `$&#123;this.first&#125; $&#123;this.last&#125;` &#125;&#125;let p = new Person()console.log(p.name())p.name = function () &#123; return '你好'&#125;console.log(p.name()) 场景4 12345678910111213141516function log (target, name, decriptor) &#123; let oldValue = decriptor.value decriptor.value = function () &#123; console.log(`calling $&#123;name&#125; width $&#123;arguments&#125;`) return oldValue.apply(this,arguments) &#125; return decriptor&#125;class Math &#123; @log add(a, b) &#123; return a + b &#125;&#125;let math = new Math()const result = math.add(2,4)]]></content>
      <categories>
        <category>js中的设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[装饰器模式]]></title>
    <url>%2F2018%2F12%2F28%2F%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[旧接口格式和使用者不兼容，中间加一个适配转换接口 相关代码实现1234567891011121314151617class Adaptee &#123; specificRequest() &#123; return '德国标准插头' &#125;&#125;class Target &#123; constructor() &#123; this.adaptee = new Adaptee() &#125; request() &#123; let info = this.adaptee.specificRequest() return `$&#123;info&#125; - 转化器 - 中国标准插头` &#125;&#125;let target = new Target()let res = target.request()console.log(res) 使用场景场景1 旧接口封装 1234567891011121314151617新封装的接口ajax(&#123; url: '/getData', type: 'Post', dataType: 'json', data: &#123; id: '123' &#125; &#125;).done(function() &#123;&#125;)但因为历史原因，代码中全部都是: $.ajax(&#123;...&#125;)可以做如下修改:做一层适配器let $ = &#123; ajax:function (options) &#123; return ajax(options); &#125;&#125;]]></content>
      <categories>
        <category>js中的设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
